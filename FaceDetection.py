# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N_7tGwQkHDSLRCgmWaE8GIXEzswIPq5d
"""

from google.colab import drive
drive.mount('/content/drive/')

import PIL.Image
import PIL.ImageDraw
import dlib
import face_recognition

"""### Face Recognition Pipeline Steps:

1. Locate and Extract faces from each image.
2. Identify facial features in each image.
3. Align faces to match post template.
4. Encode faces using a trained neural network.
5. Check Eucledian distance between face encodings.

We shall use Histogram of Oriented Gradient (HOG) Method to detect faces.

- HOG method looks for shoft from light to dark areas in an image.
- It doesn't need color info.
- HOG is a simplified representation of an image that still capturesenough detail to detect face.
- HOG representation is not affected by small changes in lighting.
"""

# Load the jpg file into a numpy array
image = face_recognition.load_image_file('/content/drive/My Drive/Colab Notebooks/familyfunction.JPG')

# Find all the face in the image
face_locations = face_recognition.face_locations(image)

number_of_faces = len(face_locations)
print('I found {} face(s) in this photograph'.format(number_of_faces))

# Load the image into a Python Image Library object so that we can draw on top of image
pil_image = PIL.Image.fromarray(image)

for face_location in face_locations:

  # Print the location of each face in the image. Each face is a list of coordinates
  top, right, bottom, left = face_location

  print('A face is located at pixel location Top: {}, Left: {}, Bottom: {}, Right: {}'.format(top, left, bottom, right))

  # Lets draw a box around the face
  draw = PIL.ImageDraw.Draw(pil_image)
  draw.rectangle([right, bottom, left, top], outline = 'red')

# Display the image on screen
pil_image